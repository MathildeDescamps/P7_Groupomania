[{"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/index.js":"1","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/reportWebVitals.js":"2","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/serviceWorkerRegistration.js":"3","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/App.js":"4","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/AuthForm/AuthForm.js":"5","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/Accueil.js":"6","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Header/Header.js":"7","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Footer/Footer.js":"8","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/Profile.js":"9","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/PageBodyContainer.js":"10","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Post.js":"11","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Body.js":"12","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/BodyContent.js":"13","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/ProfilePageBodyContainer.js":"14","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/CreatePost.js":"15","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Header/SearchBox.js":"16","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Likes.js":"17","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Comments.js":"18","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/AuthForm/AuthHeader.js":"19"},{"size":573,"mtime":1610909539000,"results":"20","hashOfConfig":"21"},{"size":364,"mtime":1610909539000,"results":"22","hashOfConfig":"21"},{"size":5064,"mtime":1610909539000,"results":"23","hashOfConfig":"21"},{"size":983,"mtime":1610909539000,"results":"24","hashOfConfig":"21"},{"size":11824,"mtime":1610964503891,"results":"25","hashOfConfig":"21"},{"size":999,"mtime":1610964640157,"results":"26","hashOfConfig":"21"},{"size":2733,"mtime":1610964157791,"results":"27","hashOfConfig":"21"},{"size":979,"mtime":1610909539000,"results":"28","hashOfConfig":"21"},{"size":1015,"mtime":1610909539000,"results":"29","hashOfConfig":"21"},{"size":5852,"mtime":1610909539000,"results":"30","hashOfConfig":"21"},{"size":231,"mtime":1610909539000,"results":"31","hashOfConfig":"21"},{"size":3234,"mtime":1610981805389,"results":"32","hashOfConfig":"21"},{"size":927,"mtime":1610966692871,"results":"33","hashOfConfig":"21"},{"size":9867,"mtime":1610909539000,"results":"34","hashOfConfig":"21"},{"size":11459,"mtime":1610981829509,"results":"35","hashOfConfig":"21"},{"size":883,"mtime":1610909539000,"results":"36","hashOfConfig":"21"},{"size":4570,"mtime":1610909539000,"results":"37","hashOfConfig":"21"},{"size":6136,"mtime":1610979295446,"results":"38","hashOfConfig":"21"},{"size":254,"mtime":1610909539000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"713fjp",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"42"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"42"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"42"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"42"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/index.js",[],["91","92"],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/reportWebVitals.js",[],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/serviceWorkerRegistration.js",[],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/App.js",[],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/AuthForm/AuthForm.js",[],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/Accueil.js",["93","94"],"import React, { useState, useEffect } from 'react';\nimport authHeader from '../components/AuthForm/AuthHeader';\nimport Header from '../components/Header/Header';\nimport Footer from '../components/Footer/Footer';\nimport PageBodyContainer from '../components/PostAndTheme/PageBodyContainer';\nimport axios from 'axios';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\nconst Accueil = () => {\n\n  const [userList, setUserList] = useState(null);\n\n  const getUsers = async () => {\n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n    const response = await axios.get(UrlAPI + currentUser.id + '/users', { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setUserList(data))\n  }\n\n  useEffect ( () => {\n      if (!userList) getUsers();\n  }, []);\n\n    return (\n      <>\n        {userList && <Header userList={userList} />}\n        {userList && <PageBodyContainer userList={userList} />}\n        <Footer /> \n      </>\n    );\n};\n\nexport default Accueil;\n","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Header/Header.js",["95","96","97","98"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport logo from '../../header-logo.png';\nimport SearchBox from \"./SearchBox\";\nimport { Avatar, Link } from '@material-ui/core';\nimport { Person } from '@material-ui/icons';\n\n// STYLE DU COMPOSANT :\nconst useStyles = makeStyles(() => ({\n    root: {\n        display: 'flex',\n        position: 'fixed',\n        alignItems: 'center',\n        backgroundColor: '#F2D3D4',\n        height: '10ch',\n        width: '100%',\n        justifyContent: 'space-between',\n        paddingLeft: '30px',\n        paddingRight: '30px',\n        zIndex: '2',\n    },\n    logo: {\n        height: '6ch',\n    },\n    leftPart: {\n        display: 'flex',\n        justifyContent: 'flex-start',\n    },\n    centerPart: {\n        width: '50ch',\n        justifyContent: 'center',\n    },\n    rightPart: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    avatar: {\n        cursor: 'pointer',\n    },\n    link: {\n        color: '#0E0C0C',\n        fontWeight: '500',\n        fontSize: '20px',\n        marginLeft: '15px',\n    },\n}));\n\n// LOGIQUE DU COMPOSANT :\nconst Header = (props) => {\n\n    const [userInfos, setUserInfos] = useState(null);\n    const [image, setImage] = useState(\"\");\n    const classes = useStyles();\n\n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n    \n   useEffect ( () => {\n        if (currentUser && currentUser.profilePic) {\n            let buff = currentUser.profilePic.data;\n            let src = Buffer.from(buff).toString();\n            setImage(src);\n        }\n    }, []);\n\n    const handleLogout = () => {\n        sessionStorage.removeItem(\"currentUser\");\n    };\n\n    return (\n    <>\n        <div id=\"header-container\" className={ classes.root } >\n            <div id=\"left-part\" className={ classes.leftPart } >\n                <Link href='/accueil'><img src={ logo } alt='[ logo Postmania ]' className={classes.logo} id=\"logo\" /></Link>\n            </div>\n            <div id=\"center-part\" className={ classes.centerPart } >\n                <SearchBox userList={props.userList} className={classes.centerPart} />\n            </div>\n            <div id=\"right-part\" className={ classes.rightPart } >\n                <Avatar id=\"profile-picture\" className={ classes.avatar }  alt=\"[ votre photo de profile ]\">\n                    {!image && <Person style={{fontSize: 40}} id=\"avatar\"/>}\n                    {image && <img id=\"image\" src={image} style={{ width: '40px', height: '40px'}} />}\n                </Avatar>\n                <Link className={classes.link} href=\"/\" onClick={handleLogout} >Se déconnecter</Link>\n            </div>\n        </div>\n    </>\n    );\n};\n\nexport default Header;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Footer/Footer.js",[],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/containers/Profile.js",["99","100"],"import React, { useState, useEffect } from 'react';\nimport Header from '../components/Header/Header';\nimport Footer from '../components/Footer/Footer';\nimport ProfilePageBodyContainer from '../components/PostAndTheme/ProfilePageBodyContainer';\nimport axios from 'axios';\nimport authHeader from '../components/AuthForm/AuthHeader';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\nconst Profile = () => {\n  const [userList, setUserList] = useState(null);\n  let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n  const getUsers = async () => {\n    const response = await axios.get(UrlAPI + currentUser.id + '/users', { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setUserList(data))\n  }\n\n  useEffect ( () => {\n      if (!userList) getUsers();\n  }, []);\n\n    return (\n      <>\n        {userList && <Header userList={userList} />}\n        {userList && <ProfilePageBodyContainer userList={userList} />}\n        <Footer /> \n      </>\n    );\n};\nexport default Profile;\n","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/PageBodyContainer.js",["101","102","103","104"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CssBaseline, Button } from '@material-ui/core';\nimport Post from './Post';\nimport CreatePost from './CreatePost';\nimport axios from 'axios';\nimport authHeader from '../AuthForm/AuthHeader';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\n// STYLE :\n\nconst useStyles = makeStyles(() => ({\n        postContainer: {\n            width: '80%',\n            position: 'relative',\n            paddingTop: '10ch',\n        },\n        themeContainer: {\n            backgroundColor: '#F1D4D4',\n            width: '20%',\n            height: '100%',\n            position: 'fixed',\n            right: '0', \n            top: '0',\n            marginTop: '10ch',      \n            paddingLeft: '1ch',\n            paddingRight: '1ch',\n        },\n        themeContainerHeader: {\n            backgroundColor: '#D7502F',\n            color: 'white',\n            fontSize: '28px',\n            fontWeight: '600',\n            textAlign: 'center',\n            padding: '1ch',\n        },\n        themeFlexBox: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            height: '100%',\n        },\n        themesButtons: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'center',\n        },\n        cancelFiltersButton: {\n            backgroundColor: '#D64F30',\n            color: 'white',\n            \"&:hover\": {\n                backgroundColor: '#FF5F39'\n            },\n            marginLeft: '1ch',\n            marginRight: '1ch',\n            marginTop: '1ch',\n        },\n        themeButton: {\n            backgroundColor: '#FFFFFE',\n            color: '#696A6B',\n            fontSize: '18px',\n            fontWeight: '400',\n            padding: '1ch',\n            maxWidth: '24ch',\n            width: '14ch',\n            textAlign: 'center',\n            margin: '1ch',\n            \"&:hover\": {\n                backgroundColor: '#D64F30',\n                color: '#FFFFFE',\n            },\n        },\n        activeTheme: {\n            fontSize: '18px',\n            fontWeight: '400',\n            padding: '1ch',\n            maxWidth: '24ch',\n            width: '14ch',\n            textAlign: 'center',\n            margin: '1ch',\n            backgroundColor: '#D35233',\n            color: 'white',\n        },\n}));\n\n// LOGIQUE :\n\nconst PageBodyContainer = (props) => {   \n    const [postList, setPostList] = useState(null);\n    const [themeList, setThemeList] = useState(null);\n    const [selectedThemes, setSelectedThemes] = useState([]);\n\n    const classes = useStyles();\n\n    let users = props.userList;\n\n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n\n    const getUser = (userid) => {\n        return users.filter(user => (user.id == userid));\n    }\n\n    //On envoi une requête GET à l'API pour récupérer un tableau 'postList' contenant des objets (1 objet / post).\n    useEffect ( () => {\n        if (users) {\n            axios.get(UrlAPI + currentUser.id + '/posts', { headers: authHeader() })\n            .then(result => result.data)\n            .then(data => { \n                setPostList(data.map(p => { \n                    p.author=getUser(p.user)[0]; \n                    return p; \n                }));\n            });\n        }    \n    }, []);\n\n    //On envoi une requête GET à l'API pour récupérer un tableau 'themeList' contenant des objets (1 objet / theme).\n    useEffect ( () => {\n        axios.get(UrlAPI + currentUser.id + '/themes', { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setThemeList(data))\n    }, []);\n\n    const cancelFilters = () => {\n        setSelectedThemes([]);\n    };\n\n    return (\n        <>\n            <CssBaseline />\n                <div className= { classes.postContainer }>\n                    <CreatePost themes={themeList} />\n                    {postList && postList.filter(post => ((selectedThemes.includes(post.theme))||(selectedThemes.length == 0))).map( (post) => { \n                        return <Post key={post.id} post={post}/>;\n                    })}\n            </div>\n            <div className={ classes.themeContainer } >\n                <div className={ classes.themeContainerHeader } >THÈMES</div>\n                    <div className={classes.themeFlexBox}>\n                        <div className={classes.themesButtons}>\n                            {themeList && themeList.map((theme) => { \n                                return (\n                                    <Button key={theme.id} \n                                        className={selectedThemes.includes(theme.id) ? classes.activeTheme : classes.themeButton}\n                                        onClick={() => { \n                                            if (!selectedThemes.includes(theme.id)) {\n                                                setSelectedThemes([...selectedThemes, theme.id]);\n                                            }\n                                            else {\n                                                setSelectedThemes(selectedThemes.filter(item => { \n                                                    return item !== theme.id; \n                                                }));\n                                            }\n                                        }} > \n                                        {theme && theme.name} \n                                    </Button>\n                                )\n                            })}\n                        </div>\n                        <Button className={classes.cancelFiltersButton} onClick={cancelFilters} >Retirer tous les filtres</Button>\n                    </div>\n            </div>\n        </>\n    )\n};\n\nexport default PageBodyContainer;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Post.js",["105"],"import React, { useEffect } from 'react';\nimport Body from './Body';\n\n\n// LOGIQUE DU COMPOSANT :\n\nconst Post = (props) => {\n\n    return(\n        <>\n            <Body post={props.post} />\n        </>\n    );\n};\n\n\nexport default Post;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Body.js",["106","107","108"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { Person } from '@material-ui/icons';\nimport BodyContent from './BodyContent';\nimport Likes from './Likes';\nimport Comments from './Comments';\nimport moment from 'moment';\n\n// STYLE DU COMPOSANT :\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '90%',\n        margin: 'auto',\n\n    },\n    header: {\n        display: 'flex',\n        backgroundColor: '#D75030',\n        color: 'white',\n        width: '20%',\n        height: '10ch',\n        paddingLeft: '2ch',\n        justifyContent: 'flex-start',\n        textDecoration: 'none',\n        \"&:hover\": {\n            textDecoration: 'underline',\n        },\n    },\n    avatar: {\n        position: 'relative',\n        top: '1ch',\n    },\n    userName: {\n        marginLeft: '2ch',\n        fontWeight: '600',\n        fontSize: '20px',\n        color: 'white',\n        textAlign: 'left',\n    },\n    postedDate: {\n        fontSize: '12px',\n        textAlign: 'left',\n        marginLeft: '2ch',\n        position: 'relative',\n        bottom: '4ch',\n    },\n    body: {\n        backgroundColor: '#F2D3D4',\n        padding: '2ch',\n        width: '100%',\n        margin: 'auto',\n        marginBottom: '10ch',\n    },\n}));\n\n// LOGIQUE DU COMPOSANT :\nconst PostBody = ({post}) => {\n\n    const classes = useStyles();\n\n    //On initialise le state.\n    const [userProfile, setUserProfile] = useState(null);\n    const [image, setImage] = useState(null);\n\n    let buff; \n    let src; \n\n    //On fait une requête GET à l'API pour obtenir les infos du user concerné.\n    useEffect ( () => {\n        if (post.author) {\n            setUserProfile(post.author);\n            if (post.author.profilePic) {\n                buff = post.author.profilePic.data;\n                src = Buffer.from(buff).toString();\n                setImage(src);\n            }\n        }\n    }, []);\n\n\n    //Le composant retourne le post.\n    return(\n        <div className={classes.root} >\n            <div>\n                    <a className={classes.header} href={userProfile &&  \"/profile/\" + userProfile.id}> \n                        <Avatar className={ classes.avatar }>\n                            {!image && <Person style={{fontSize: 40}} id=\"avatar\"/>}\n                            {image && <img id=\"image\" src={image} style={{ width: '40px', height: '40px'}} />}\n                        </Avatar>\n                        <div>\n                            <p className={classes.userName}>{userProfile && userProfile.firstname + ' ' + userProfile.lastname}</p>     \n                            <p className={classes.postedDate} >Posté le {moment(post.createdAt).format(\"DD/MM/YYYY\")} à {moment(post.createdAt).format(\"HH:m\")}</p>   \n                        </div>        \n                    </a>\n            </div>\n            <div className={classes.body} > \n                <BodyContent url={post.url} content={post.content} />\n                <Likes postId={post.id} />\n                <Comments postId={post.id} />\n            </div>\n        </div>\n    );\n};\n\nexport default PostBody;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/BodyContent.js",[],["109","110"],"/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/ProfilePageBodyContainer.js",["111","112","113","114","115","116","117","118","119","120"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { CssBaseline, Button, Avatar, Link } from '@material-ui/core';\nimport { Person, ArrowBack } from '@material-ui/icons';\nimport Post from './Post';\nimport axios from 'axios';\nimport FileBase64 from 'react-file-base64';\nimport moment from 'moment';\nimport authHeader from '../AuthForm/AuthHeader';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\n// STYLE :\n\nconst useStyles = makeStyles(() => ({\n        postContainer: {\n            width: '60%',\n            position: 'relative',\n            paddingTop: '20ch',\n            margin: 'auto',\n        },\n        themeContainer: {\n            backgroundColor: '#F1D4D4',\n            width: '20%',\n            height: '100%',\n            position: 'fixed',\n            right: '0', \n            top: '0',\n            marginTop: '10ch',      \n            paddingLeft: '1ch',\n            paddingRight: '1ch',\n        },\n        themeContainerHeader: {\n            backgroundColor: '#D7502F',\n            color: 'white',\n            fontSize: '28px',\n            fontWeight: '600',\n            textAlign: 'center',\n            padding: '1ch',\n        },\n        themeFlexBox: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'flex-start',\n            height: '100%',\n        },\n        themeButton: {\n            backgroundColor: '#FFFFFE',\n            color: '#696A6B',\n            fontSize: '18px',\n            fontWeight: '400',\n            padding: '1ch',\n            maxWidth: '24ch',\n            width: '14ch',\n            textAlign: 'center',\n            margin: '1ch',\n            \"&:hover\": {\n                backgroundColor: '#D35233',\n                color: '#FFFFFE',\n            },\n        },\n        activeTheme: {\n            fontSize: '18px',\n            fontWeight: '400',\n            padding: '1ch',\n            maxWidth: '24ch',\n            width: '14ch',\n            textAlign: 'center',\n            margin: '1ch',\n            backgroundColor: '#D35233',\n            color: 'white',\n        },\n        cancelFiltersButton: {\n            backgroundColor: '#D64F30',\n            color: 'white',\n            \"&:hover\": {\n                backgroundColor: '#FF5F39'\n            },\n            marginLeft: '1ch',\n            marginRight: '1ch',\n            marginTop: '1ch',\n        },\n        profileContainer: {\n            backgroundColor: '#FFFFFF',\n            width: '20%',\n            height: '100%',\n            position: 'absolute',\n            position: 'fixed',\n            left: '0', \n            top: '0',\n            marginTop: '10ch',      \n            paddingLeft: '1ch',\n            paddingRight: '1ch',\n            textAlign: 'center',\n        },\n        avatar: {\n            margin: 'auto',\n            marginTop: '2ch',\n            width: '10ch',\n            height: '10ch',\n            \"&>span\": {\n                display: \"none\",\n            },\n            \"&:hover\": {\n                \"&>span\": {\n                    display: 'block',\n                    textDecoration: 'underline',\n                    cursor: 'pointer',\n                },\n                \"&>#avatar\": {\n                    display: 'none',\n                },\n            },\n        },\n        userName: {\n            textDecoration: 'underline',\n            fontSize: '25px',\n            color: '#D75030',\n        },\n        list: {\n            listStyle: 'none',\n            color:'#545555',\n            marginLeft: '0',\n            lineHeight: '2',\n        },\n        backToHome: {\n            display: 'flex',\n            alignItems: 'center',\n            width: '25%',\n            color: '#757575',\n            position: 'fixed',\n            marginTop: '-80px',\n            marginLeft: '2ch',\n            \"&:hover\": {\n                color: '#D64F30',\n                textDecoration: 'none',\n            },\n        },\n}));\n\n// LOGIQUE :\n\nconst ProfilePageBodyContainer = (props) => {\n        \n    //On initialise le state.\n    const [postList, setPostList] = useState(null);\n    const [themeList, setThemeList] = useState(null);\n    const [selectedThemes, setSelectedThemes] = useState([]);\n    const [userInfos, setUserInfos] = useState(null);\n    const [image, setImage] = useState(\"\");\n\n    const classes = useStyles();\n\n    let url = window.location.pathname;\n    let userId = url.split('profile/')[1];\n    let buff; \n    let src; \n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n\n    let users = props.userList;\n\n    const getUser = (userid) => {\n        return users.filter(user => (user.id == userid));\n    }\n\n    //On envoi une requête GET à l'API pour récupérer un tableau 'postList' contenant des objets (1 objet / post).\n    useEffect ( () => {\n        if (users) {\n            axios.get(UrlAPI + currentUser.id + '/posts', { headers: authHeader() })\n            .then(result => result.data)\n            .then(data => { \n                setPostList(data.map(p => { \n                    p.author=getUser(p.user)[0]; \n                    return p; \n                }));\n            });\n        }    \n    }, []);\n\n    //On envoi une requête GET à l'API pour récupérer un tableau 'themeList' contenant des objets (1 objet / theme).\n    useEffect ( () => {\n        axios.get(UrlAPI + currentUser.id + '/themes', { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setThemeList(data));\n    }, []);\n\n    //On récupère les infos du user cliqué et on traite la photo de profile pour pouvoir l'afficher.\n    useEffect ( () => {\n        axios.get(UrlAPI + currentUser.id + '/users/' + userId, { headers: authHeader() })\n            .then(res => { \n                setUserInfos(res.data[0]);\n                buff = res.data[0].profilePic.data;\n                src = Buffer.from(buff).toString();\n                setImage(src);\n            })\n            .catch(err => console.log(err));\n    }, []);\n\n    //On récupère l'image uploadée par le user pour la mettre à jour en base. \n    const changeImage = (img) => {\n        setImage(img.base64);\n        console.log(\"img =>\", img.base64);\n        axios.put(UrlAPI + currentUser.id + '/users/' + userInfos.id + '/image', { image: img.base64 }, { headers: authHeader() })\n            .then(result => {\n                console.log(result);\n            })\n            .catch(err => console.log(err))\n    };\n\n    const cancelFilters = () => {\n        setSelectedThemes([]);\n    };\n    \n    return ( \n        <>\n            <CssBaseline />\n            <div className= { classes.profileContainer }> \n                <Avatar className= { classes.avatar } >\n                    {!image && <Person style={{fontSize: 60}} id=\"avatar\"/>}\n                    {image && <img id=\"image\" src={image} style={{ display: 'block', width: 'auto', height: 'auto', minHeight: '10ch', maxWidth: '10ch'}} />}\n                </Avatar>\n                {userInfos && (userInfos.id == currentUser.id) && \n                <FileBase64 multiple={ false } onDone={changeImage} />\n                }\n                <h3 className= { classes.userName }> {userInfos && userInfos.firstname + ' ' + userInfos.lastname}  </h3>\n                <p className= { classes.list } >\n                    <b>{ userInfos && userInfos.status}</b><br/>\n                    <b>Date d'embauche :</b> { userInfos && moment(userInfos.hiringDate).format(\"DD/MM/YYYY\")}<br/>\n                    <b>Email :</b> {userInfos && userInfos.email}<br/>\n                </p>\n            </div>\n            <div className= { classes.postContainer }>\n                <Link className={classes.backToHome} href='/accueil'>\n                    <ArrowBack style={{ fontSize: 35, cursor: 'pointer', marginRight: '1ch' }} />\n                    <p>Revenir à la page d'accueil</p>\n                </Link>\n                {postList && postList.filter(post => (userInfos && (post.user == userInfos.id) && ((selectedThemes.includes(post.theme)) || (selectedThemes.length == 0)))).map(post => \n                    { \n                        return <Post key={post.id} post={post} />;\n                    }\n                )}\n            </div>\n            <div className={ classes.themeContainer } >\n                <div className={ classes.themeContainerHeader } >THÈMES</div>\n                    <div className={classes.themeFlexBox}>\n                        <div className={classes.themesButtons}>\n                            {themeList && themeList.map((theme) => { \n                                return (\n                                    <Button key={theme.id} \n                                        className={selectedThemes.includes(theme.id) ? classes.activeTheme : classes.themeButton}\n                                        onClick={() => { \n                                            if (!selectedThemes.includes(theme.id)) {\n                                                setSelectedThemes([...selectedThemes, theme.id]);\n                                            }\n                                            else {\n                                                setSelectedThemes(selectedThemes.filter(item => { \n                                                    return item !== theme.id; \n                                                }));\n                                            }\n                                        }} > \n                                        {theme && theme.name} \n                                    </Button>\n                                )\n                            })}\n                        </div>\n                        <Button className={classes.cancelFiltersButton} onClick={cancelFilters} >Retirer tous les filtres</Button>\n                    </div>\n            </div>\n        </>\n    );\n};\n\nexport default ProfilePageBodyContainer;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/CreatePost.js",["121","122","123","124","125","126","127","128","129","130","131","132"],"import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { Button } from '@material-ui/core';\nimport ImageUploader from 'react-images-upload';\nimport authHeader from '../AuthForm/AuthHeader';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\n// STYLE :\n\nconst useStyles = makeStyles((theme) => ({\n    createPostBlock: {\n            display: 'flex',\n            flexDirection: 'column',\n            width: '70%',\n            margin: 'auto',  \n            marginTop: '4ch',\n            marginBottom: '8ch',\n        },\n        createPostHeader: {\n            backgroundColor: '#D75030',\n            color: 'white',\n            width: '25%',\n            padding: '1ch',\n            textAlign: 'left',\n            fontSize: '12px',\n        },\n        createPostBody: {\n            display: 'flex',\n            flexDirection: 'column',\n            backgroundColor: '#F2D3D4',\n            padding: '2ch',\n            width: '100%',\n            margin: 'auto',\n        },\n        createPostBodyContent: {\n            backgroundColor: '#FFFFFE',\n            width: '95%',\n            margin: 'auto',\n            padding: '2ch',\n            textAlign: 'left',\n        },  \n        postTextarea: {\n            width: '100%',\n            height: 'auto',\n            fontFamily: 'Avenir, Segoe, UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n            border: 'none',\n            \"&:focus\": {\n                outline: 'none',\n            },\n        },\n        buttons: {\n            display: 'flex',\n            width: '95%',\n            height: '3.5ch',\n            margin: 'auto',\n            marginTop: '2ch',\n            justifyContent: 'space-between',\n        },\n        buttonsText: {\n            color: '#D75030',\n            fontWeight: '600',\n            fontSize: '14px',   \n            marginRight: '1ch',\n            marginTop: '0.5ch',\n        },\n        dropDownList: {\n            width: '30%',\n            backgroundColor: '#D75030',\n            borderStyle: 'none',\n            color: '#FFFFFE',\n            paddingLeft: '1ch',\n            marginRight: '1ch',\n            fontSize: '14px',   \n            cursor: 'pointer',\n        },\n        createTheme: {\n            color: '#686A6C',\n            width: '35%',\n            fontSize: '14px',   \n            borderStyle: 'none',\n            paddingLeft: '1ch',\n        },\n        publish: {\n            backgroundColor: '#D75030',\n            color: '#FFFFFE',\n            borderRadius: '5px',\n            width: '15%',\n            fontWeight: '400',\n            \"&:hover\": {\n                backgroundColor: '#B85030',\n            },\n        },\n        errorMessages: {\n            display: 'none',\n            width: '100%',\n            marginTop: '0.5ch',\n            color: '#D7502F',\n            fontWeight: '500',\n            textAlign: 'right',\n        },\n}));\n\n// LOGIQUE :\n\nconst CreatePost = props => {\n\n    const classes = useStyles();\n    const [content, setContent] = useState('');\n    const [newTheme, setNewTheme] = useState('');\n    const [user, setUser] = useState('');\n    const [theme, setTheme] = useState('');\n    const [pictures, setPictures] = useState([]);\n\n    const currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n\n    const handleChange = (event) => {\n        setTheme(event.target.value);\n    };\n\n    const handleContent = (event) => {\n        setContent(event.target.value);\n    };\n\n    const handleNewTheme = (event) => {\n        setNewTheme(event.target.value);\n    };\n    \n    //Gestion d'import d'image(s) lors de la création d'un post.\n    const onDrop = picture => {\n        setPictures(picture);\n    };\n\n    const handlePublication = () => {\n            if(theme != '' && newTheme != '') {\n                let errorBlock = document.getElementById('errorMessages');\n                let errorMessage = document.getElementById('error1');\n                let errorMessage2 = document.getElementById('error2');\n                errorBlock.style.cssText='display: block;';\n                errorMessage.style.cssText='display: block;';\n                errorMessage2.style.cssText='display: none;';\n            } else if (theme != '' && newTheme == '') {\n                axios({\n                    method: 'post',\n                    url: UrlAPI + currentUser.id + '/posts',\n                    data: { content : content, theme: theme, user: currentUser.id },\n                    headers: authHeader(),\n                })\n                .then(function (response) {\n                    //On traite la suite une fois la réponse obtenue \n                    let postId = response.data.id;\n                    if (pictures.length >0) {\n                        const fd = new FormData();\n                        let pictureList = [];\n                        pictureList = pictures.map(p => {\n                            fd.append('image', p);\n                        });                    \n                        const config = {\n                            headers: {\n                                'Content-Type' : 'multipart/form-data',\n                                'x-access-token': currentUser.token,\n                                'Authorization': 'Bearer ' + currentUser.token,\n                            }\n                        }\n                        axios.post(UrlAPI + currentUser.id + '/posts/' + postId + '/images', fd, config)\n                        .then(function (response) {\n                            console.log('image:', response);\n                            window.location.reload(false);\n                        })\n                        .catch(function (error) {\n                            //On traite ici les erreurs éventuellement survenues\n                            console.log(error);\n                        });\n                    }\n                    else window.location.reload(false);\n                })\n                .catch(function (error) {\n                    //On traite ici les erreurs éventuellement survenues\n                    console.log(error);\n                });\n            } else if (theme == '' && newTheme != '') {\n                axios({\n                    method: 'post',\n                    url: UrlAPI + currentUser.id + '/themes',\n                    data: { user : currentUser.id, name: newTheme },\n                    headers: authHeader(),\n                })\n                .then(res => {\n                    axios({\n                        method: 'post',\n                        url: UrlAPI + currentUser.id + '/posts',\n                        data: { content : content, theme: res.data.id, user: currentUser.id },\n                        headers: authHeader(),\n                    })\n                    .then(function (response) {\n                        //On traite la suite une fois la réponse obtenue \n                        let postId = response.data.id;\n                        if (pictures.length >0) {\n                            const fd = new FormData();\n                            let pictureList = [];\n                            pictureList = pictures.map(p => {\n                                fd.append('image', p);\n                            });                    \n                            const config = {\n                                headers: {\n                                    'Content-Type' : 'multipart/form-data',\n                                    'x-access-token': currentUser.token,\n                                    'Authorization': 'Bearer ' + currentUser.token,\n                                }\n                            }\n                            axios.post(UrlAPI + currentUser.id + '/posts/' + postId + '/images', fd, config)\n                            .then(function (response) {\n                                console.log('image:', response);\n                                window.location.reload(false);\n                            })\n                            .catch(function (error) {\n                                //On traite ici les erreurs éventuellement survenues\n                                console.log(error);\n                            });\n                        }\n                        else window.location.reload(false);\n                    })\n                    .catch(function (error) {\n                        //On traite ici les erreurs éventuellement survenues\n                        console.log(error);\n                    });\n                })\n                .catch(err => {\n                    console.log(err);\n                });\n            }\n            else {\n                let errorBlock = document.getElementById('errorMessages');\n                let errorMessage = document.getElementById('error1');\n                let errorMessage2 = document.getElementById('error2');\n                errorBlock.style.cssText='display: block;';\n                errorMessage2.style.cssText='display: block;';\n                errorMessage.style.cssText='display: none;';\n            }\n            \n        };\n\n    return(\n        <div className= { classes.createPostBlock }>\n            <div className={classes.createPostHeader}>\n                <h2>PUBLIER UN POST</h2>\n            </div>\n            <div className={classes.createPostBody} >\n                <div className={classes.createPostBodyContent} >\n                    <textarea className={classes.postTextarea} placeholder=\"Ecrivez le contenu de votre post ici...\" value={content} onChange={handleContent}/>\n                    <ImageUploader\n                        withIcon={false}\n                        buttonText='Ajoutez des images'\n                        onChange={onDrop}\n                        imgExtension={['.jpg', '.gif', '.png', '.gif']}\n                        maxFileSize={5242880}\n                        withPreview={true}\n                        withLabel={false}\n                        fileSizeError='Image trop volumineuse'\n                        buttonStyles={{backgroundColor: '#757575', borderRadius: '5px', position: \"relative\", margin: \"0\", height: '30px'}}\n                    />\n                </div>\n                <div className={classes.buttons}>\n                    <select className={classes.dropDownList} value={theme} placeholder=\"Choisissez un thème\" onChange={handleChange}>\n                        <option value=\"\" defaultValue data-default>Choisissez un thème</option>\n                        {props.themes && props.themes.map((theme) => { \n                        return (\n                            <option key={theme.id} value={theme.id}>{theme.name}</option>\n                        ); })}\n                    </select>\n                    <div className={classes.buttonsText}>OU</div>\n                    <input className={classes.createTheme} type=\"text\" onChange={handleNewTheme} value={newTheme} id=\"new-theme\" placeholder=\"Créez un nouveau thème...\" />\n                    <Button onClick={handlePublication} className={classes.publish} >PUBLIER</Button>\n                </div>\n            </div>\n            <div id=\"errorMessages\" className={classes.errorMessages} >\n                    <p id=\"error1\" style={{display: 'none'}} >Veuillez ne renseigner qu'un seul thème.</p>\n                    <p id=\"error2\" style={{display: 'none'}} >Veuillez renseigner un thème.</p>\n            </div>\n        </div>\n    );\n\n};\n\nexport default CreatePost;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/Header/SearchBox.js",["133","134"],"import React, { useState, useEffect } from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { useHistory } from 'react-router-dom';\n\nexport default function SearchBox(props) {\n\n  const [value, setValue] = useState(null);\n  const history = useHistory();\n\n  return (\n    <Autocomplete\n      id=\"search-box\"\n      value={value}\n      onChange={(event, newValue) => {\n        setValue(newValue);\n        if (newValue) window.location.pathname = \"/profile/\" + newValue.id; \n      }}\n      options={props.userList}\n      clearOnEscape\n      getOptionLabel={(option) => option.firstname + ' ' + option.lastname}\n      style={{ width: 300, backgroundColor: 'white', outline: 'none', }}\n      renderInput={(params) => <TextField {...params} label=\"Rechercher un collègue...\" variant=\"outlined\" />}\n    />\n  );\n}\n\n","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Likes.js",["135","136","137","138","139","140","141","142","143","144"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\nimport ThumbDownIcon from '@material-ui/icons/ThumbDown';\nimport authHeader from '../AuthForm/AuthHeader';\n\nconst UrlAPI = 'http://localhost:3000/api/';\n\n// STYLE :\n\nconst useStyles = makeStyles((theme) => ({\n    mentionsBlock: {\n        display: 'flex',\n    },\n    mentionButton: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n        backgroundColor: '#D64F30',\n        color: 'white',\n        height: '5ch',\n        width: '10%',\n        borderRadius: '5px',\n        marginRight: '1ch',\n        marginTop: '1ch',\n        paddingLeft: '2ch',\n        paddingRight: '2ch',\n        \"&:hover\": {\n            cursor: 'pointer',\n            backgroundColor: '#FF5F39',\n        },\n    },\n    mentionNumber: {\n        fontWeight: '800',\n        fontSize: '16px',\n    },\n}));\n\n// LOGIQUE :\n\nconst Likes = ({postId}) => {\n\n    const classes = useStyles();\n\n    const [mentions, setMentions] = useState({});\n    const [myMention, setMyMention] = useState(0);\n\n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n\n    useEffect ( () => {\n        axios.get(UrlAPI + currentUser.id + '/mentions/' + postId, { headers: authHeader() })\n        .then(res => { setMentions(res.data); })\n        .catch(err => console.log(err));\n\n        axios.get(UrlAPI + currentUser.id + '/mentions/mine/' + postId + '/' + currentUser.id, { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setMyMention(data.mention) );\n\n    }, []);\n\n    const updateMyMention = (likedislike) => {\n        switch(myMention) {\n            case 0 :\n                if (likedislike == 1) {\n                    setMyMention(1);\n                    setMentions({ likes: mentions.likes+1, dislikes: mentions.dislikes });\n                } else if (likedislike == -1) {\n                    setMyMention(-1);\n                    setMentions({ likes: mentions.likes, dislikes: mentions.dislikes+1 });\n                }\n                break;\n            case 1 :\n                if (likedislike == 1) {\n                    setMyMention(0);\n                    setMentions({ likes: mentions.likes-1, dislikes: mentions.dislikes });\n                } else if (likedislike == -1) {\n                    setMyMention(-1);\n                    setMentions({ likes: mentions.likes-1, dislikes: mentions.dislikes+1 });\n                }\n                break;\n            case -1 :\n                if (likedislike == 1) {\n                    setMyMention(1);\n                    setMentions({ likes: mentions.likes+1, dislikes: mentions.dislikes-1 });\n                } else if (likedislike == -1) {\n                    setMyMention(0);\n                    setMentions({ likes: mentions.likes, dislikes: mentions.dislikes-1 });\n                }\n                break;\n        }\n    };\n\n    const handleLike = (e) => {\n        let name = e.target.getAttribute('name');\n        if(name == 'like') {\n            updateMyMention(1);\n            axios({\n                method: 'post',\n                url: UrlAPI + currentUser.id + '/mentions/' + postId,\n                data: {user: currentUser.id, post: postId, mention: 1},\n                headers: authHeader(),\n            })\n            .then(result => result.data)\n            .catch(err => console.log(err));\n        } else if( name == 'dislike') {\n            updateMyMention(-1);\n            axios({\n                method: 'post',\n                url: UrlAPI + currentUser.id + '/mentions/' + postId,\n                data: {user: currentUser.id, post: postId, mention: -1},\n                headers: authHeader(),\n            })\n            .then(result => result.data)\n            .catch(err => console.log(err));\n        } else {\n            return;\n        }\n    };\n    \n    return(\n        <>\n            <div className={classes.mentionsBlock}>\n                <div className={classes.mentionButton} name='like' onClick={handleLike}>\n                    <ThumbUpIcon />\n                    <span className={classes.mentionNumber}>{mentions.likes}</span>\n                </div>\n                <div className={classes.mentionButton} name='dislike' onClick={handleLike}>\n                    <ThumbDownIcon />\n                    <span className={classes.mentionNumber}>{mentions.dislikes}</span>\n                </div>\n            </div>\n        </>\n    );\n};\n\nexport default Likes;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/PostAndTheme/Comments.js",["145","146","147","148","149","150"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport axios from 'axios';\nimport { Avatar, Button, Link } from '@material-ui/core';\nimport { Person } from '@material-ui/icons';\nimport moment from 'moment';\nimport authHeader from '../AuthForm/AuthHeader';\n\nconst UrlAPI = \"http://localhost:3000/api/\";\n\n// STYLE :\n\nconst useStyles = makeStyles((theme) => ({\n    commentSection: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: '100%',\n        backgroundColor: '#F4F4F4',\n        marginTop: '1ch',\n        padding: '1ch',\n    },\n    writeComment: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    },\n    commentButton: {\n        backgroundColor: '#555555',\n        color: 'white',\n        textTransform: 'lowercase',\n        height: '4.5ch',\n        width: '10%',\n\n    },\n    seeMoreButton: {\n        backgroundColor: '#555555',\n        color: 'white',\n        textTransform: 'lowercase',\n        height: '4ch',\n        alignSelf: 'flex-end',\n        marginTop: '1ch',\n    },\n    firstLetter: {\n        textTransform: 'capitalize',\n    },\n    writeCommentText: {\n        width: '90%',\n        height: '4.5ch',\n        marginRight: '1ch',\n        border: 'solid 2px #555555',\n        padding: '0.5ch',\n        color: '#555555',\n        fontWeight: '500',\n        fontFamily: 'Avenir, Segoe, UI, Roboto, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif',\n    },\n    comments: {\n        backgroundColor: 'white',\n        width: '100%',\n        marginTop: '1ch',\n        padding: '1ch',\n    },\n    commentHeader: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'flex-start',\n        width: '100%',\n        height: '6ch',\n    },\n    avatar: {\n        border: 'solid 2.5px #E3431D',\n        marginTop: '1ch',\n    },\n    headerText: {\n        color: '#E3431D',\n        fontWeight: '500',\n        fontSize: '15px',\n        marginLeft: '1ch',\n    },\n    commentDate: {\n        textAlign: 'left',\n        fontSize: '10px',\n        marginTop: '-2ch',\n        marginLeft: '8ch',\n        marginBottom: '4ch',\n        width: '15%',\n    },\n    commentContent: {\n        width: '100%',\n        height: '2ch',\n        maxHeight: '8ch',\n        textAlign: 'left',\n        paddingLeft: '1ch',\n        paddingRight: '1ch',\n        paddingBottom: '0ch',\n        position: 'relative',\n        bottom: '10px',\n    },\n}));\n\n// LOGIQUE :\n\nconst Comments = ({postId}) => {\n\n    let currentUser = JSON.parse(sessionStorage.getItem(\"currentUser\"));\n\n    const classes = useStyles();\n\n    const [commentsList, setCommentsList] = useState([]);\n    const [commentContent, setCommentContent] = useState(\"\");\n    const [userList, setUserList] = useState(null);\n\n    const getUsers = async () => {\n        const response = await axios.get(UrlAPI + currentUser.id + '/users', { headers: authHeader() })\n        .then(result => result.data)\n        .then(data => setUserList(data))\n    }\n\n    useEffect ( () => {\n        if (!userList) getUsers();\n        axios.get(UrlAPI + currentUser.id + '/comments/' + postId, { headers: authHeader() })\n        .then(res => setCommentsList(res.data))\n        .catch(err => console.log(err));\n    }, []);\n\n    const setCommentText = (e) => {\n        setCommentContent(e.target.value);\n    };\n\n    const handleComment = () => {\n        axios({\n                method: 'post',\n                url: UrlAPI + currentUser.id + '/comments/' + postId,\n                data: {user: currentUser.id, post: postId, content: commentContent},\n                headers: authHeader(),\n            })\n            .then(res => setCommentsList([res.data, ...commentsList]))\n            .catch(err => console.log(err));\n        setCommentContent(\"\");\n        return;\n    };\n\n    return(\n        <div className={classes.commentSection}>\n            <div className={classes.writeComment}>\n                <textarea className={classes.writeCommentText} value={commentContent} onChange={setCommentText} type=\"text\" placeholder=\"Rédigez un commentaire...\"/>\n                <Button onClick={handleComment} className={classes.commentButton} ><span className={classes.firstLetter}>C</span>ommenter</Button>\n            </div>\n            {userList && commentsList && commentsList.map( (comment) => {\n                return (\n                    <div key={comment.id} className={classes.comments}>\n                        {userList.filter(author => (comment.user == author.id)).map(author => {\n                        let src=\"\";\n                        if (author.profilePic) {\n                            let buff = author.profilePic.data;\n                            src = Buffer.from(buff).toString();\n                        }\n                        return (\n                        <React.Fragment key={comment.id} >\n                            <Link className={classes.commentHeader}>\n                                <Avatar className={classes.avatar} >\n                                  {src==\"\" && <Person style={{fontSize: 40}} id=\"avatar\"/>}\n                                  {src!=\"\" && <img id=\"image\" src={src} style={{ width: '40px', height: '40px'}} />}\n                                </Avatar>\n                                <p className={classes.headerText}>\n                                    {author.firstname + \" \" + author.lastname}\n                                </p>\n                            </Link>\n                            <p className={classes.commentDate}>{moment(comment.createdAt).format(\"DD/MM/YYYY HH:m\")}</p>\n                            <div className={classes.commentContent}>\n                                <p className={classes.commentText}>{comment.content}</p>\n                            </div>\n                        </React.Fragment>\n                        ); }) }\n                    </div>\n                )\n            })}\n            <Button className={classes.seeMoreButton}><span className={classes.firstLetter}>V</span>oir plus de commentaires</Button>\n        </div>\n    )\n};\n\nexport default Comments;","/Users/mathildedescamps/Git/OpenClassrooms/P7/frontend/my-app/src/components/AuthForm/AuthHeader.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":16,"column":11,"nodeType":"157","messageId":"158","endLine":16,"endColumn":19},{"ruleId":"159","severity":1,"message":"160","line":23,"column":6,"nodeType":"161","endLine":23,"endColumn":8,"suggestions":"162"},{"ruleId":"155","severity":1,"message":"163","line":51,"column":12,"nodeType":"157","messageId":"158","endLine":51,"endColumn":21},{"ruleId":"155","severity":1,"message":"164","line":51,"column":23,"nodeType":"157","messageId":"158","endLine":51,"endColumn":35},{"ruleId":"159","severity":1,"message":"165","line":63,"column":8,"nodeType":"161","endLine":63,"endColumn":10,"suggestions":"166"},{"ruleId":"167","severity":1,"message":"168","line":81,"column":31,"nodeType":"169","endLine":81,"endColumn":102},{"ruleId":"155","severity":1,"message":"156","line":14,"column":11,"nodeType":"157","messageId":"158","endLine":14,"endColumn":19},{"ruleId":"159","severity":1,"message":"170","line":21,"column":6,"nodeType":"161","endLine":21,"endColumn":8,"suggestions":"171"},{"ruleId":"172","severity":1,"message":"173","line":101,"column":46,"nodeType":"174","messageId":"175","endLine":101,"endColumn":48},{"ruleId":"159","severity":1,"message":"176","line":116,"column":8,"nodeType":"161","endLine":116,"endColumn":10,"suggestions":"177"},{"ruleId":"159","severity":1,"message":"178","line":123,"column":8,"nodeType":"161","endLine":123,"endColumn":10,"suggestions":"179"},{"ruleId":"172","severity":1,"message":"173","line":134,"column":121,"nodeType":"174","messageId":"175","endLine":134,"endColumn":123},{"ruleId":"155","severity":1,"message":"180","line":1,"column":17,"nodeType":"157","messageId":"158","endLine":1,"endColumn":26},{"ruleId":"159","severity":1,"message":"181","line":76,"column":24,"nodeType":"182","endLine":76,"endColumn":51},{"ruleId":"159","severity":1,"message":"183","line":77,"column":23,"nodeType":"184","endLine":77,"endColumn":51},{"ruleId":"167","severity":1,"message":"168","line":91,"column":39,"nodeType":"169","endLine":91,"endColumn":110},{"ruleId":"151","replacedBy":"185"},{"ruleId":"153","replacedBy":"186"},{"ruleId":"187","severity":1,"message":"188","line":88,"column":13,"nodeType":"189","messageId":"175","endLine":88,"endColumn":21},{"ruleId":"172","severity":1,"message":"173","line":163,"column":46,"nodeType":"174","messageId":"175","endLine":163,"endColumn":48},{"ruleId":"159","severity":1,"message":"176","line":178,"column":8,"nodeType":"161","endLine":178,"endColumn":10,"suggestions":"190"},{"ruleId":"159","severity":1,"message":"178","line":185,"column":8,"nodeType":"161","endLine":185,"endColumn":10,"suggestions":"191"},{"ruleId":"159","severity":1,"message":"181","line":192,"column":24,"nodeType":"182","endLine":192,"endColumn":51},{"ruleId":"159","severity":1,"message":"183","line":193,"column":23,"nodeType":"184","endLine":193,"endColumn":51},{"ruleId":"167","severity":1,"message":"168","line":220,"column":31,"nodeType":"169","endLine":220,"endColumn":157},{"ruleId":"172","severity":1,"message":"173","line":222,"column":45,"nodeType":"174","messageId":"175","endLine":222,"endColumn":47},{"ruleId":"172","severity":1,"message":"173","line":237,"column":79,"nodeType":"174","messageId":"175","endLine":237,"endColumn":81},{"ruleId":"172","severity":1,"message":"173","line":237,"column":164,"nodeType":"174","messageId":"175","endLine":237,"endColumn":166},{"ruleId":"155","severity":1,"message":"192","line":112,"column":12,"nodeType":"157","messageId":"158","endLine":112,"endColumn":16},{"ruleId":"155","severity":1,"message":"193","line":112,"column":18,"nodeType":"157","messageId":"158","endLine":112,"endColumn":25},{"ruleId":"172","severity":1,"message":"194","line":136,"column":22,"nodeType":"174","messageId":"175","endLine":136,"endColumn":24},{"ruleId":"172","severity":1,"message":"194","line":136,"column":40,"nodeType":"174","messageId":"175","endLine":136,"endColumn":42},{"ruleId":"172","severity":1,"message":"194","line":143,"column":30,"nodeType":"174","messageId":"175","endLine":143,"endColumn":32},{"ruleId":"172","severity":1,"message":"173","line":143,"column":48,"nodeType":"174","messageId":"175","endLine":143,"endColumn":50},{"ruleId":"155","severity":1,"message":"195","line":156,"column":25,"nodeType":"157","messageId":"158","endLine":156,"endColumn":36},{"ruleId":"196","severity":1,"message":"197","line":156,"column":54,"nodeType":"198","messageId":"199","endLine":156,"endColumn":56},{"ruleId":"172","severity":1,"message":"173","line":182,"column":30,"nodeType":"174","messageId":"175","endLine":182,"endColumn":32},{"ruleId":"172","severity":1,"message":"194","line":182,"column":48,"nodeType":"174","messageId":"175","endLine":182,"endColumn":50},{"ruleId":"155","severity":1,"message":"195","line":202,"column":29,"nodeType":"157","messageId":"158","endLine":202,"endColumn":40},{"ruleId":"196","severity":1,"message":"197","line":202,"column":58,"nodeType":"198","messageId":"199","endLine":202,"endColumn":60},{"ruleId":"155","severity":1,"message":"180","line":1,"column":27,"nodeType":"157","messageId":"158","endLine":1,"endColumn":36},{"ruleId":"155","severity":1,"message":"200","line":9,"column":9,"nodeType":"157","messageId":"158","endLine":9,"endColumn":16},{"ruleId":"159","severity":1,"message":"201","line":60,"column":8,"nodeType":"161","endLine":60,"endColumn":10,"suggestions":"202"},{"ruleId":"203","severity":1,"message":"204","line":63,"column":9,"nodeType":"205","messageId":"206","endLine":91,"endColumn":10},{"ruleId":"172","severity":1,"message":"173","line":65,"column":33,"nodeType":"174","messageId":"175","endLine":65,"endColumn":35},{"ruleId":"172","severity":1,"message":"173","line":68,"column":40,"nodeType":"174","messageId":"175","endLine":68,"endColumn":42},{"ruleId":"172","severity":1,"message":"173","line":74,"column":33,"nodeType":"174","messageId":"175","endLine":74,"endColumn":35},{"ruleId":"172","severity":1,"message":"173","line":77,"column":40,"nodeType":"174","messageId":"175","endLine":77,"endColumn":42},{"ruleId":"172","severity":1,"message":"173","line":83,"column":33,"nodeType":"174","messageId":"175","endLine":83,"endColumn":35},{"ruleId":"172","severity":1,"message":"173","line":86,"column":40,"nodeType":"174","messageId":"175","endLine":86,"endColumn":42},{"ruleId":"172","severity":1,"message":"173","line":96,"column":17,"nodeType":"174","messageId":"175","endLine":96,"endColumn":19},{"ruleId":"172","severity":1,"message":"173","line":106,"column":25,"nodeType":"174","messageId":"175","endLine":106,"endColumn":27},{"ruleId":"155","severity":1,"message":"156","line":113,"column":15,"nodeType":"157","messageId":"158","endLine":113,"endColumn":23},{"ruleId":"159","severity":1,"message":"207","line":123,"column":8,"nodeType":"161","endLine":123,"endColumn":10,"suggestions":"208"},{"ruleId":"172","severity":1,"message":"173","line":151,"column":66,"nodeType":"174","messageId":"175","endLine":151,"endColumn":68},{"ruleId":"172","severity":1,"message":"173","line":161,"column":39,"nodeType":"174","messageId":"175","endLine":161,"endColumn":41},{"ruleId":"172","severity":1,"message":"194","line":162,"column":39,"nodeType":"174","messageId":"175","endLine":162,"endColumn":41},{"ruleId":"167","severity":1,"message":"168","line":162,"column":47,"nodeType":"169","endLine":162,"endColumn":116},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userList'. Either include it or remove the dependency array.","ArrayExpression",["211"],"'userInfos' is assigned a value but never used.","'setUserInfos' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.",["212"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getUsers' and 'userList'. Either include them or remove the dependency array.",["213"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'currentUser.id', 'getUser', and 'users'. Either include them or remove the dependency array.",["214"],"React Hook useEffect has a missing dependency: 'currentUser.id'. Either include it or remove the dependency array.",["215"],"'useEffect' is defined but never used.","Assignments to the 'buff' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","Assignments to the 'src' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["209"],["210"],"no-dupe-keys","Duplicate key 'position'.","ObjectExpression",["216"],["217"],"'user' is assigned a value but never used.","'setUser' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'pictureList' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentUser.id' and 'postId'. Either include them or remove the dependency array.",["218"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'currentUser.id', 'getUsers', 'postId', and 'userList'. Either include them or remove the dependency array.",["219"],"no-global-assign","no-unsafe-negation",{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},{"desc":"226","fix":"227"},{"desc":"228","fix":"229"},{"desc":"226","fix":"230"},{"desc":"228","fix":"231"},{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [userList]",{"range":"236","text":"237"},"Update the dependencies array to be: [currentUser]",{"range":"238","text":"239"},"Update the dependencies array to be: [getUsers, userList]",{"range":"240","text":"241"},"Update the dependencies array to be: [currentUser.id, getUser, users]",{"range":"242","text":"243"},"Update the dependencies array to be: [currentUser.id]",{"range":"244","text":"245"},{"range":"246","text":"243"},{"range":"247","text":"245"},"Update the dependencies array to be: [currentUser.id, postId]",{"range":"248","text":"249"},"Update the dependencies array to be: [currentUser.id, getUsers, postId, userList]",{"range":"250","text":"251"},[789,791],"[userList]",[1607,1609],"[currentUser]",[799,801],"[getUsers, userList]",[3371,3373],"[currentUser.id, getUser, users]",[3686,3688],"[currentUser.id]",[5153,5155],[5469,5471],[1692,1694],"[currentUser.id, postId]",[3299,3301],"[currentUser.id, getUsers, postId, userList]"]